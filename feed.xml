<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.0">Jekyll</generator><link href="https://mode19.github.io/humanreadable/feed.xml" rel="self" type="application/atom+xml" /><link href="https://mode19.github.io/humanreadable/" rel="alternate" type="text/html" /><updated>2021-04-27T21:03:24-05:00</updated><id>https://mode19.github.io/humanreadable/</id><title type="html">HumanReadable Blog</title><subtitle>Computers, Linux, open-source, programming, technology and related articles</subtitle><entry><title type="html">Tmux</title><link href="https://mode19.github.io/humanreadable/unix,tmux/2018/09/03/Tmux.html" rel="alternate" type="text/html" title="Tmux" /><published>2018-09-03T00:00:00-05:00</published><updated>2018-09-03T00:00:00-05:00</updated><id>https://mode19.github.io/humanreadable/unix,tmux/2018/09/03/Tmux</id><content type="html" xml:base="https://mode19.github.io/humanreadable/unix,tmux/2018/09/03/Tmux.html">&lt;h2 id=&quot;tmux&quot;&gt;Tmux&lt;/h2&gt;

&lt;p&gt;Sample tmux rc:&lt;/p&gt;

&lt;p&gt;~/.tmux.conf&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# remap prefix to Control + a
set -g prefix C-a
# bind 'C-a C-a' to type 'C-a'
bind C-a send-prefix
unbind C-b

set-window-option -g mode-keys vi
set-option -g history-limit 10000

is_vim=&quot;ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'&quot;

#bind-key -n C-h if-shell &quot;$is_vim&quot; &quot;send-keys C-h&quot;  &quot;select-pane -L&quot;
#bind-key -n C-j if-shell &quot;$is_vim&quot; &quot;send-keys C-j&quot;  &quot;select-pane -D&quot;
#bind-key -n C-k if-shell &quot;$is_vim&quot; &quot;send-keys C-k&quot;  &quot;select-pane -U&quot;
#bind-key -n C-l if-shell &quot;$is_vim&quot; &quot;send-keys C-l&quot;  &quot;select-pane -R&quot;
#bind-key -n C-\ if-shell &quot;$is_vim&quot; &quot;send-keys C-\\&quot; &quot;select-pane -l&quot;


bind | split-window -h -c &quot;#{pane_current_path}&quot;
bind - split-window -v -c &quot;#{pane_current_path}&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Tmux</summary></entry><entry><title type="html">Test Pyramid</title><link href="https://mode19.github.io/humanreadable/test-automation/2018/09/03/Test-Pyramid.html" rel="alternate" type="text/html" title="Test Pyramid" /><published>2018-09-03T00:00:00-05:00</published><updated>2018-09-03T00:00:00-05:00</updated><id>https://mode19.github.io/humanreadable/test-automation/2018/09/03/Test-Pyramid</id><content type="html" xml:base="https://mode19.github.io/humanreadable/test-automation/2018/09/03/Test-Pyramid.html">&lt;h2 id=&quot;some-ideas-around-test-automation&quot;&gt;Some Ideas Around Test Automation&lt;/h2&gt;

&lt;p&gt;The test pyramid idea goes back to:&lt;/p&gt;</content><author><name></name></author><summary type="html">Some Ideas Around Test Automation</summary></entry><entry><title type="html">Some Docker Commands</title><link href="https://mode19.github.io/humanreadable/vim,/unix/2018/09/03/Docker-Commands.html" rel="alternate" type="text/html" title="Some Docker Commands" /><published>2018-09-03T00:00:00-05:00</published><updated>2018-09-03T00:00:00-05:00</updated><id>https://mode19.github.io/humanreadable/vim,/unix/2018/09/03/Docker-Commands</id><content type="html" xml:base="https://mode19.github.io/humanreadable/vim,/unix/2018/09/03/Docker-Commands.html">&lt;h2 id=&quot;some-docker-commands&quot;&gt;Some Docker Commands&lt;/h2&gt;

&lt;p&gt;Start a new or exisitng container&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker start &amp;lt;containerid&amp;gt;
docker attach &amp;lt;containerid&amp;gt; - attach console
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run a command in running container:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker exec -it &amp;lt;containerid&amp;gt; /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save changes to an image (from a running container) (create a new image (or tag))&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker commit -m &quot;install stuff&quot; &amp;lt;container name or ID&amp;gt; &amp;lt;new-image-name&amp;gt;[:&amp;lt;tag&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run a new container based on a image&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker run -v $PWD/docs:/mydocs -p 4000:4000 --name MyUbuntuXenialRepo -it myubuntuxenialimage bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Some Docker Commands</summary></entry><entry><title type="html">My custom vim setup</title><link href="https://mode19.github.io/humanreadable/vim,/unix/2018/08/01/My-custom-vim-setup.html" rel="alternate" type="text/html" title="My custom vim setup" /><published>2018-08-01T00:00:00-05:00</published><updated>2018-08-01T00:00:00-05:00</updated><id>https://mode19.github.io/humanreadable/vim,/unix/2018/08/01/My-custom-vim-setup</id><content type="html" xml:base="https://mode19.github.io/humanreadable/vim,/unix/2018/08/01/My-custom-vim-setup.html">&lt;h2 id=&quot;my-custom-vim-setup&quot;&gt;My custom vim setup&lt;/h2&gt;

&lt;p&gt;Install tpope’s stuff, its awesome:&lt;/p&gt;

&lt;p&gt;https://github.com/tpope/vim-pathogen&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p ~/.vim/autoload ~/.vim/bundle &amp;amp;&amp;amp; \
curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;https://github.com/VundleVim/Vundle.vim/blob/v0.10.2/doc/vundle.txt#L234-L254&lt;/p&gt;

&lt;p&gt;start vim&lt;/p&gt;

&lt;p&gt;run :PluginInstall&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;syntax on
execute pathogen#infect()
colorscheme distinguished

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

&quot; Let Vundle manage Vundle
Plugin 'VundleVim/Vundle.vim'


set tags=./tags,tags;$HOME
&quot;set runtimepath^=~/.vim/bundle/ctrlp.vim

Bundle 'tpope/vim-dispatch'
Bundle 'mklabs/grunt.vim'
&quot;Bundle 'elzr/vim-json'
Bundle 'majutsushi/tagbar'
&quot;Bundle 'mhinz/vim-signify'
&quot;Plugin 'godlygeek/tabular'
&quot;Plugin 'plasticboy/vim-markdown'
&quot;Bundle 'Valloric/YouCompleteMe'
&quot;Bundle 'nanotech/jellybeans.vim'
&quot;Bundle 'Lokaltog/vim-powerline'
Plugin 'bling/vim-airline'
Bundle 'scrooloose/syntastic'
Bundle 'scrooloose/nerdtree'
Plugin 'maksimr/vim-jsbeautify'
&quot;Plugin 'jelera/vim-javascript-syntax'
Plugin 'mileszs/ack.vim'
&quot;Plugin 'pangloss/vim-javascript'
Plugin 'https://github.com/heavenshell/vim-jsdoc'

call vundle#end()            &quot; required

&quot;________________________________________________________________________________

function! OpenCurrentDir()
    execute &quot;!cygstart&quot; . &quot; &quot; . getcwd()
endfunction

function! OpenCurrentFile()
    execute &quot;!cygstart %&quot;
endfunction
&quot;________________________________________________________________________________

&quot;tern plugin
&quot;call tern#Disable()

filetype plugin indent on    &quot; required

map &amp;lt;leader&amp;gt;cd :call OpenCurrentDir()&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;cf :call OpenCurrentFile()&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;ff :call JsBeautify()&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;d :w! ~/dump.txt&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;p :r ~/dump.txt&amp;lt;cr&amp;gt;
&quot;ack plugin
let g:ackprg = &quot;~/bin/ack&quot;

&quot; Switch to alternate file - doesnt' work in screen/console
map &amp;lt;c-Tab&amp;gt; :bnext&amp;lt;cr&amp;gt;
map &amp;lt;c-S-Tab&amp;gt; :bprevious&amp;lt;cr&amp;gt;
&quot; try again
map &amp;lt;c-i&amp;gt; :bnext&amp;lt;cr&amp;gt;
map &amp;lt;c-u&amp;gt; :bprevious&amp;lt;cr&amp;gt;

&quot;color jellybeans
command! Test Dispatch grunt test --filter %:t:r
nnoremap &amp;lt;localleader&amp;gt;tt :Test&amp;lt;CR&amp;gt;

set foldmethod=syntax
&quot;set foldlevelstart=1
&quot;folder level start to unreasonable high level so as to open folds, as by
&quot;default folds are close on 'start' (opening of buffer)
set foldlevelstart=20

&quot;let javaScript_fold=1         &quot; JavaScript

:set tabstop=4
:set shiftwidth=4
:set expandtab

:set smartcase

&quot;Airline
&quot;________________________________________________________________________________
let g:airline#extensions#tabline#enabled = 1

&quot; jelera/vim-javascript-syntax
&quot;________________________________________________________________________________
&quot;au FileType javascript call JavaScriptFold()

&quot; pangloss/vim-javascript
&quot;________________________________________________________________________________
set conceallevel=0
&quot;set conceallevel=1
set concealcursor=nvic

let b:javascript_fold=0
let g:javascript_conceal_function   = &quot;ƒ&quot;
let g:javascript_conceal_null       = &quot;ø&quot;
let g:javascript_conceal_this       = &quot;@&quot;
let g:javascript_conceal_return     = &quot;&amp;lt;ret&amp;gt;&quot;
let g:javascript_conceal_undefined  = &quot;&amp;lt;undef&amp;gt;&quot;
&quot;let g:javascript_conceal_NaN        = &quot;ℕ&quot;
&quot;let g:javascript_conceal_prototype  = &quot;¶&quot;
&quot;let g:javascript_conceal_static     = &quot;•&quot;
&quot;let g:javascript_conceal_super      = &quot;Ω&quot;

&quot; Configure tagbar
&quot;________________________________________________________________________________
&quot;let g:tagbar_width = 30
&quot;let g:tagbar_ctags_bin = '/usr/bin/ctags'
&quot;let g:tagbar_autopreview = 1
autocmd VimEnter * nested :TagbarOpen
nmap &amp;lt;leader&amp;gt;t :TagbarToggle&amp;lt;CR&amp;gt;

&quot; netrw
&quot;________________________________________________________________________________
&quot;let mapleader=&quot; &quot;
&quot;map &amp;lt;leader&amp;gt;k :E&amp;lt;cr&amp;gt;
&quot;let g:netrw_liststyle=3
&quot;let g:netrw_browse_split=4
&quot;&quot; do not display info on the top of window
&quot;let g:netrw_banner = 0
&quot;let g:netrw_altv = 1
&quot;let g:netrw_winsize = 25
&quot;
&quot;augroup ProjectDrawer
&quot;  autocmd!
&quot;  autocmd VimEnter * :Vexplore
&quot;augroup END

&quot;CTRLP
&quot;________________________________________________________________________________
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|target\|bin'
&quot;g:ctrlp_match_window = 'min:4,max:72'
&quot;i&quot; Use a leader instead of the actual named binding
&quot;nmap &amp;lt;leader&amp;gt;p :CtrlP&amp;lt;cr&amp;gt;
&quot;
&quot;&quot; Easy bindings for its various modes
nmap &amp;lt;leader&amp;gt;b :CtrlPBuffer&amp;lt;cr&amp;gt;
nmap &amp;lt;leader&amp;gt;bm :CtrlPMixed&amp;lt;cr&amp;gt;
nmap &amp;lt;leader&amp;gt;bs :CtrlPMRU&amp;lt;cr&amp;gt;

&quot;syntastic
&quot;________________________________________________________________________________

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_error_symbol = &quot;✗&quot;
let g:syntastic_warning_symbol = &quot;⚠&quot;
&quot;let g:syntastic_javascript_checkers = ['jscs','jshint', 'eslint']
let g:syntastic_javascript_checkers = ['jshint']
&quot;let g:syntastic_javascript_checkers = ['eslint']
&quot;
let g:syntastic_aggregate_errors = 1

&quot; NERDTree
&quot;________________________________________________________________________________
nmap &amp;lt;leader&amp;gt;n :NERDTreeToggle&amp;lt;CR&amp;gt;
let NERDTreeHighlightCursorline=1
&quot;autocmd vimenter * NERDTree
let NERDTreeIgnore = ['tmp', '.git', 'node_modules']
autocmd bufenter * if (winnr(&quot;$&quot;) == 1 &amp;amp;&amp;amp; exists(&quot;b:NERDTreeType&quot;) &amp;amp;&amp;amp; b:NERDTreeType == &quot;primary&quot;) | q | endif

&quot;Plugin 'https://github.com/heavenshell/vim-jsdoc'
let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_input_description = 1
let g:jsdoc_return = 0
let g:jsdoc_return_type = 0
let g:jsdoc_return_description = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">My custom vim setup</summary></entry><entry><title type="html">Testing Cloud Services - Book Notes</title><link href="https://mode19.github.io/humanreadable/cloud,/testing,/automated/2018/07/01/Testing-cloud-services.html" rel="alternate" type="text/html" title="Testing Cloud Services - Book Notes" /><published>2018-07-01T00:00:00-05:00</published><updated>2018-07-01T00:00:00-05:00</updated><id>https://mode19.github.io/humanreadable/cloud,/testing,/automated/2018/07/01/Testing-cloud-services</id><content type="html" xml:base="https://mode19.github.io/humanreadable/cloud,/testing,/automated/2018/07/01/Testing-cloud-services.html">&lt;h2 id=&quot;testing-cloud-services&quot;&gt;Testing Cloud Services&lt;/h2&gt;

&lt;p&gt;This book by Kees Blokland, Jeroen Mongerink and Martin Pol - How to test Saas, Paas &amp;amp; Iaas provides a great intro and quick overview of designing a test strategy for the cloud.&lt;/p&gt;

&lt;p&gt;It begins with the &lt;a href=&quot;https://www.nist.gov/programs-projects/nist-cloud-computing-program-nccp&quot;&gt;National Institute of Standards and Technology&lt;/a&gt; definitions of cloud computing.  For example describing the three service models:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Software as a Service (SaaS)&lt;/li&gt;
  &lt;li&gt;Platform as a Service (PaaS)&lt;/li&gt;
  &lt;li&gt;Infrastructure as a Service (Iaas)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Details found &lt;a href=&quot;https://csrc.nist.gov/publications/detail/sp/800-145/final&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using the &lt;a href=&quot;https://en.wikipedia.org/wiki/V-Model_(software_development)&quot;&gt;V-model&lt;/a&gt; as a reference for the software development model the authors describe how cloud computing changes the testing landscape throughout the various phases of software development.&lt;/p&gt;

&lt;p&gt;The book neatly segregates into the following sections:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Service Selection - how to chose providers and services in a complex landscape of vendors and services?&lt;/li&gt;
  &lt;li&gt;Performance - how do we measure if the service responds quickly enough?&lt;/li&gt;
  &lt;li&gt;Maintainability - costs of service management&lt;/li&gt;
  &lt;li&gt;Continuity - does the service meet business requirements?&lt;/li&gt;
  &lt;li&gt;Availability - what happens in case of failure?
    &lt;ul&gt;
      &lt;li&gt;Describes &lt;a href=&quot;https://en.wikipedia.org/wiki/Failure_mode_and_effects_analysis&quot;&gt;Failure-mode-and-effects&lt;/a&gt; analysis as a useful technique in this area&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Functionality - functional testing requirements
    &lt;ul&gt;
      &lt;li&gt;Mentions &lt;a href=&quot;https://www.youtube.com/watch?v=Lhyc5BSsLFs&quot;&gt;Process Cycle Test&lt;/a&gt; technique as a way to generate test test cases&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This book quickly covers the above areas as a broad sweep of the challenges and benefits encountered when testing in the cloud. Each section as well provides a set of questions to be used as a great starting point for designing test strategies.&lt;/p&gt;</content><author><name></name></author><summary type="html">Testing Cloud Services</summary></entry><entry><title type="html">Aspects of a Test Automation Solution</title><link href="https://mode19.github.io/humanreadable/graphviz/2018/06/21/Test-Automation-Landscape.html" rel="alternate" type="text/html" title="Aspects of a Test Automation Solution" /><published>2018-06-21T00:00:00-05:00</published><updated>2018-06-21T00:00:00-05:00</updated><id>https://mode19.github.io/humanreadable/graphviz/2018/06/21/Test-Automation-Landscape</id><content type="html" xml:base="https://mode19.github.io/humanreadable/graphviz/2018/06/21/Test-Automation-Landscape.html">&lt;h2 id=&quot;aspects-of-a-test-automation-solution&quot;&gt;Aspects of a Test Automation Solution&lt;/h2&gt;

&lt;p&gt;Aspects of test automation solution&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Product Knowledge&lt;/li&gt;
  &lt;li&gt;Development Backlog&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Graph below:&lt;/p&gt;
&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; width=&quot;720pt&quot; height=&quot;223pt&quot; viewBox=&quot;0.00 0.00 720.00 223.21&quot;&gt;
&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(2.3 2.3) rotate(0) translate(4 510)&quot;&gt;
&lt;title&gt;architecture&lt;/title&gt;
&lt;polygon fill=&quot;white&quot; stroke=&quot;transparent&quot; points=&quot;-4,4 -4,-510 1654,-510 1654,4 -4,4&quot;&gt;&lt;/polygon&gt;
&lt;g id=&quot;clust1&quot; class=&quot;cluster&quot;&gt;
&lt;title&gt;clusterKnowledge&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;320,-412 320,-498 594,-498 594,-412 320,-412&quot;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;457&quot; y=&quot;-482.8&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;Existing Product Knowledge&lt;/text&gt;
&lt;/g&gt;
&lt;g id=&quot;clust2&quot; class=&quot;cluster&quot;&gt;
&lt;title&gt;clusterDevelopmentBacklog&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;602,-412 602,-498 836,-498 836,-412 602,-412&quot;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;719&quot; y=&quot;-482.8&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;New/Pending Product Knowledge&lt;/text&gt;
&lt;/g&gt;
&lt;g id=&quot;clust3&quot; class=&quot;cluster&quot;&gt;
&lt;title&gt;clusterSystemUnderTest&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;548,-102 548,-227 1508,-227 1508,-102 548,-102&quot;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;1028&quot; y=&quot;-211.8&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;System-under-test&lt;/text&gt;
&lt;/g&gt;
&lt;g id=&quot;clust4&quot; class=&quot;cluster&quot;&gt;
&lt;title&gt;clusterThirdParty&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;1010,-110 1010,-196 1500,-196 1500,-110 1010,-110&quot;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;1255&quot; y=&quot;-180.8&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;Third-party Components&lt;/text&gt;
&lt;/g&gt;
&lt;g id=&quot;clust5&quot; class=&quot;cluster&quot;&gt;
&lt;title&gt;clusterTestInfrastructure&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;8,-235 8,-404 1642,-404 1642,-235 8,-235&quot;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;825&quot; y=&quot;-388.8&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;Development Infrastructure&lt;/text&gt;
&lt;/g&gt;
&lt;g id=&quot;clust6&quot; class=&quot;cluster&quot;&gt;
&lt;title&gt;clusterProductionSupport&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;425,-8 425,-94 967,-94 967,-8 425,-8&quot;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;696&quot; y=&quot;-78.8&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;Production Support&lt;/text&gt;
&lt;/g&gt;

&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;
&lt;title&gt;SystemUnderTestKnowledge&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;348&quot; y=&quot;-439.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;System-under-test (Knowledge)&lt;/text&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; d=&quot;M349,-425C349,-425 565,-425 565,-425 571,-425 577,-431 577,-437 577,-437 577,-450 577,-450 577,-456 571,-462 565,-462 565,-462 349,-462 349,-462 343,-462 337,-456 337,-450 337,-450 337,-437 337,-437 337,-431 343,-425 349,-425&quot;&gt;&lt;/path&gt;
&lt;/g&gt;

&lt;g id=&quot;node13&quot; class=&quot;node&quot;&gt;
&lt;title&gt;TestCaseRepo&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;514&quot; y=&quot;-345.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;TestCaseRepository&lt;/text&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; points=&quot;503,-331 503,-368 661,-368 661,-331 503,-331&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;SystemUnderTestKnowledge-&amp;gt;TestCaseRepo&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M487.58,-419.99C504.22,-407.74 525,-392.45 542.82,-379.33&quot;&gt;&lt;/path&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;545.32,-381.84 551.3,-373.09 541.18,-376.2 545.32,-381.84&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;
&lt;title&gt;DevelopmentBacklog&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;631&quot; y=&quot;-439.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;Development Back log&lt;/text&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; d=&quot;M631.5,-425C631.5,-425 780.5,-425 780.5,-425 786.5,-425 792.5,-431 792.5,-437 792.5,-437 792.5,-450 792.5,-450 792.5,-456 786.5,-462 780.5,-462 780.5,-462 631.5,-462 631.5,-462 625.5,-462 619.5,-456 619.5,-450 619.5,-450 619.5,-437 619.5,-437 619.5,-431 625.5,-425 631.5,-425&quot;&gt;&lt;/path&gt;
&lt;/g&gt;

&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;DevelopmentBacklog-&amp;gt;TestCaseRepo&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M675.67,-419.99C659.15,-407.74 638.54,-392.45 620.86,-379.33&quot;&gt;&lt;/path&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;622.57,-376.24 612.45,-373.09 618.4,-381.86 622.57,-376.24&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;
&lt;title&gt;SystemUnderTestWeb&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;807&quot; y=&quot;-137.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;System-under-test (WEB)&lt;/text&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; points=&quot;795.5,-123 795.5,-160 990.5,-160 990.5,-123 795.5,-123&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;
&lt;title&gt;SystemUnderTestApi&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;576&quot; y=&quot;-137.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;System-under-test (API)&lt;/text&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; points=&quot;564.5,-123 564.5,-160 759.5,-160 759.5,-123 564.5,-123&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;node14&quot; class=&quot;node&quot;&gt;
&lt;title&gt;TestResultsRepo&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;709&quot; y=&quot;-345.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;TestResultsRepository(Auto)&lt;/text&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; points=&quot;697.5,-331 697.5,-368 922.5,-368 922.5,-331 697.5,-331&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;edge5&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;SystemUnderTestApi-&amp;gt;TestResultsRepo&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M678.25,-165.12C704.84,-202.13 757.67,-275.66 787.72,-317.49&quot;&gt;&lt;/path&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;784.92,-319.59 793.6,-325.67 790.6,-315.5 784.92,-319.59&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;node18&quot; class=&quot;node&quot;&gt;
&lt;title&gt;LogAggregator&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;609&quot; y=&quot;-35.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;Log Aggregator&lt;/text&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; points=&quot;598,-21 598,-58 726,-58 726,-21 598,-21&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;edge6&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;SystemUnderTestApi-&amp;gt;LogAggregator&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M662,-117.81C662,-104.64 662,-87.82 662,-73.24&quot;&gt;&lt;/path&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;665.5,-73.1 662,-63.1 658.5,-73.1 665.5,-73.1&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;node5&quot; class=&quot;node&quot;&gt;
&lt;title&gt;CoreDownstream&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;1366&quot; y=&quot;-137.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;CoreDownstream&lt;/text&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; points=&quot;1355,-123 1355,-160 1483,-160 1483,-123 1355,-123&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;node6&quot; class=&quot;node&quot;&gt;
&lt;title&gt;PartnerSystemA&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;1202&quot; y=&quot;-137.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;PartnerSystemA&lt;/text&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; points=&quot;1191,-123 1191,-160 1319,-160 1319,-123 1191,-123&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;node7&quot; class=&quot;node&quot;&gt;
&lt;title&gt;PartnerSystemB&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;1038&quot; y=&quot;-137.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;PartnerSystemB&lt;/text&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; points=&quot;1027,-123 1027,-160 1155,-160 1155,-123 1027,-123&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;node8&quot; class=&quot;node&quot;&gt;
&lt;title&gt;SourceCodeRepo&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;1471&quot; y=&quot;-345.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;SourceCodeRepositor&lt;/text&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; points=&quot;1459.5,-331 1459.5,-368 1624.5,-368 1624.5,-331 1459.5,-331&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;node9&quot; class=&quot;node&quot;&gt;
&lt;title&gt;CICDPipeLine&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;1314&quot; y=&quot;-345.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;CICD-PipeLine&lt;/text&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; points=&quot;1303,-331 1303,-368 1423,-368 1423,-331 1303,-331&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;node10&quot; class=&quot;node&quot;&gt;
&lt;title&gt;WebTestSuite&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;1165&quot; y=&quot;-345.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;WebTestSuite&lt;/text&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; points=&quot;1153.5,-331 1153.5,-368 1266.5,-368 1266.5,-331 1153.5,-331&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;node11&quot; class=&quot;node&quot;&gt;
&lt;title&gt;ApiTestSuite&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;570&quot; y=&quot;-262.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;ApiTestSuite&lt;/text&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; points=&quot;558.5,-248 558.5,-285 671.5,-285 671.5,-248 558.5,-248&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;edge4&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;ApiTestSuite-&amp;gt;SystemUnderTestApi&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M623.62,-242.94C630.93,-223.81 641.5,-196.15 649.7,-174.7&quot;&gt;&lt;/path&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;652.97,-175.92 653.27,-165.33 646.44,-173.43 652.97,-175.92&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;node12&quot; class=&quot;node&quot;&gt;
&lt;title&gt;TestDataRepo&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;970&quot; y=&quot;-345.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;TestDataRepository&lt;/text&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; points=&quot;959,-331 959,-368 1117,-368 1117,-331 959,-331&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;TestCaseRepo-&amp;gt;ApiTestSuite&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M591.19,-325.94C594.53,-317.76 598.36,-308.35 601.96,-299.51&quot;&gt;&lt;/path&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;605.21,-300.8 605.74,-290.22 598.73,-298.16 605.21,-300.8&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;node15&quot; class=&quot;node&quot;&gt;
&lt;title&gt;TestResultsRepoManual&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;193&quot; y=&quot;-345.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;TestResultsRepository(Manual Tests)&lt;/text&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; points=&quot;181.5,-331 181.5,-368 466.5,-368 466.5,-331 181.5,-331&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;node16&quot; class=&quot;node&quot;&gt;
&lt;title&gt;TestIssueTracker&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;36&quot; y=&quot;-345.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;Issue-tracker&lt;/text&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; points=&quot;25,-331 25,-368 145,-368 145,-331 25,-331&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;node17&quot; class=&quot;node&quot;&gt;
&lt;title&gt;ProductionIssueTracker&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;773&quot; y=&quot;-35.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;ProductionIssueTracker&lt;/text&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; points=&quot;762,-21 762,-58 950,-58 950,-21 762,-21&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;

&lt;g id=&quot;node19&quot; class=&quot;node&quot;&gt;
&lt;title&gt;UptimeMonitor&lt;/title&gt;
&lt;text text-anchor=&quot;start&quot; x=&quot;453&quot; y=&quot;-35.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;UptimeMonitor&lt;/text&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; points=&quot;442,-21 442,-58 562,-58 562,-21 442,-21&quot;&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;</content><author><name></name></author><summary type="html">Aspects of a Test Automation Solution</summary></entry><entry><title type="html">Command-line Log Metrics: cat, grep, sed, uniq, sort, wc and awk</title><link href="https://mode19.github.io/humanreadable/awk,/unix/2018/03/02/Command-line-log-metrics.html" rel="alternate" type="text/html" title="Command-line Log Metrics: cat, grep, sed, uniq, sort, wc and awk" /><published>2018-03-02T00:00:00-06:00</published><updated>2018-03-02T00:00:00-06:00</updated><id>https://mode19.github.io/humanreadable/awk,/unix/2018/03/02/Command-line-log-metrics</id><content type="html" xml:base="https://mode19.github.io/humanreadable/awk,/unix/2018/03/02/Command-line-log-metrics.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;When troubleshooting software we usually don’t have all the required information in one place. Often we only have command-line access to low level application and system log files.
  Command line tools such as tail, cat, grep etc. can be combined to provide basic insights into application performance.
Lets look at some examples of how to use standard UNIX command-line tools to analyze application log files.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Be comfortable using the UNIX command line utilities such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Cat_(Unix)&quot;&gt;cat&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Tail_(Unix)&quot;&gt;tail&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Grep&quot;&gt;grep&lt;/a&gt; etc.&lt;/li&gt;
  &lt;li&gt;Have access to the calc.sh (or some alternative) script which can calculate average/median/minimum and maximum times. See the corresponding guide &lt;a href=&quot;https://mode19.github.io/humanreadable/awk,/unix/2018/03/01/Quick-and-dirty-software-metrics-using-awk.html&quot;&gt;Quick and Dirty Software Metrics using Awk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why&quot;&gt;Why?&lt;/h2&gt;

&lt;p&gt;Lets look at real world situation: a customer has complained that some operations in the system are taking too long. Luckily the developer included some logging in the application that records how long each operation takes. If we view the log file directly we can see an entry for every event that occurred. Now imagine this log contains thousands or millions of records? How will we identify which events are being triggered in the system? How frequently are certain types of events occurring? How long does each type of event take to process (Average, minimum, maximum time etc)? The below guide is a step by step example of how to calculate these kinds of metrics.&lt;/p&gt;

&lt;p&gt;Imagine a logfile that looks as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-03-03 12:00:14 SOFTWAREPROGRAM MODULE DEBUG [sessiony] processing event #1 took 20440 ms
2018-03-03 12:00:15 SOFTWAREPROGRAM MODULE INFO [sessionx] processing event #1 took 20440 ms
2018-03-03 12:00:16 SOFTWAREPROGRAM MODULE DEBUG [sessiony] processing event #1 took 20440 ms
2018-03-04 12:00:24 SOFTWAREPROGRAM MODULE ERROR [sessionx] processing event #1 took 20440 ms
2018-03-04 12:01:04 SOFTWAREPROGRAM MODULE DEBUG [sessiony] processing event #1 took 16628 ms
2018-03-04 12:02:53 SOFTWAREPROGRAM MODULE DEBUG [sessionx] processing event #0 took 11418 ms
2018-03-04 12:03:00 SOFTWAREPROGRAM MODULE INFO [sessiony] processing event #1 took 28995 ms
2018-03-04 12:04:44 SOFTWAREPROGRAM MODULE DEBUG [sessionx] processing event #1 took 28166 ms
2018-03-04 12:04:44 SOFTWAREPROGRAM MODULE DEBUG [sessiony] processing event #0 took 26063 ms
2018-03-04 12:04:44 SOFTWAREPROGRAM MODULE INFO [sessionx] processing event #1 took 27168 ms
2018-03-04 12:07:31 SOFTWAREPROGRAM MODULE DEBUG [sessionz] processing event #0 took 30484 ms
2018-03-04 12:08:44 SOFTWAREPROGRAM MODULE DEBUG [sessionx] processing event #1 took 27769 ms
2018-03-04 12:09:07 SOFTWAREPROGRAM MODULE DEBUG [sessionz] processing event #1 took 16378 ms

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;filtering-and-counting-events&quot;&gt;Filtering and Counting Events&lt;/h2&gt;

&lt;p&gt;When faced with thousands of records, the first step is to filter out the records we are not interested in.  We do this by identifying a set of specific key words that we are interested in, and we chose these key words so that they uniquely identify the event we are interested.  For example, searching for “event #1” might also match “event #11”, so in order to uniquely identify “\sevent #1\s” we would have to also include the surrounding white-space as part of the matching expression. In this example only 2 events so we can safely filter “event #1”. See the examples below to filter out unwanted records by using &lt;a href=&quot;https://en.wikipedia.org/wiki/Cut_(Unix)&quot;&gt;grep&lt;/a&gt; and counting the remaining ones using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Wc_(Unix)&quot;&gt;wc&lt;/a&gt; utility .&lt;/p&gt;

&lt;p&gt;How many events happened on March 3rd?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat logfile.txt  | grep &quot;2018-03-03&quot; | wc -l
3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How many events happened on March 2nd?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat logfile.txt  | grep &quot;2018-03-02&quot; | wc -l
0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How many events of type “event #1” happened on March 4th?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat logfile.txt  | grep &quot;2018-03-04&quot; | grep &quot;event #1&quot; | wc -l
7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How many events happened for sessionz on March 4th?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat logfile.txt  | grep &quot;2018-03-04&quot; | grep &quot;event #1 &quot; | grep &quot;\[sessionz\]&quot; | wc -l
1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;N.B Notice the regular expression to match the session identifier sessionz includes the surround delimiters.  This avoids situations where sessionz could become a false positive for sessionzz or sessionz1 etc.&lt;/p&gt;

&lt;h2 id=&quot;cutting-and-counting&quot;&gt;Cutting and Counting&lt;/h2&gt;

&lt;p&gt;We can use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cut_(Unix)&quot;&gt;cut&lt;/a&gt; command to isolate specific fields.  This way we can aggregate data over specific groups such as time. Using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sort_(Unix)&quot;&gt;sort&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniq&quot;&gt;uniq&lt;/a&gt; utilities we can count the unique number of occurrences of each event by group.&lt;/p&gt;

&lt;p&gt;For example, how many events are happening per day?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat logfile.txt | cut -f1 -d&quot; &quot; | sort | uniq -c
3 2018-03-03
10 2018-03-04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How many events are happening per second?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat logfile.txt | cut -d &quot; &quot; -f1,2   | uniq -c
1 2018-03-03 12:00:14
1 2018-03-03 12:00:15
1 2018-03-03 12:00:16
1 2018-03-04 12:00:24
1 2018-03-04 12:01:04
1 2018-03-04 12:02:53
1 2018-03-04 12:03:00
3 2018-03-04 12:04:44
1 2018-03-04 12:07:31
1 2018-03-04 12:08:44
1 2018-03-04 12:09:07
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;what-is-the-average-processing-time-of-event-0&quot;&gt;What is the Average Processing Time of Event #0?&lt;/h2&gt;

&lt;p&gt;In order to isolate the log entries containing “event #0” and identifying only the processing time we can produce a list of all corresponding processing times.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat logfile.txt  | grep &quot;event #0 &quot;
2018-03-04 12:2:53 SOFTWAREPROGRAM MODULE DEBUG processing event #0 took 11418 ms
2018-03-04 12:5:21 SOFTWAREPROGRAM MODULE DEBUG processing event #0 took 26063 ms
2018-03-04 12:7:31 SOFTWAREPROGRAM MODULE DEBUG processing event #0 took 30484 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What are just the response times? Using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sed&quot;&gt;sed&lt;/a&gt; utility substitution command to replace the entire line with only the portion in between the word ‘took ‘ and the word ‘ ms’:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat logfile.txt  | grep &quot;event #0&quot; | sed -ne 's/.*took \([0-9]*\) ms/\1/p'
11418
26063
30484
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now how do we make sense of this data?  Especially if the result contains hundreds or thousands of records, how can we begin to understand the data?  One quick way is to calculate the average, minimum and maximum values.  This can be done using an awk script (For details on the calc.sh script reference the blog post &lt;a href=&quot;https://mode19.github.io/humanreadable/awk,/unix/2018/03/01/Quick-and-dirty-software-metrics-using-awk.html&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat logfile.text | grep &quot;event #0&quot; | sed -ne 's/.*took \([0-9]*\) ms/\1/p' | ~/bin/calc.sh
sum     count   average medium  min     max
67965   3       22655   26063   11418   30484
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion-and-next-steps&quot;&gt;Conclusion and Next Steps&lt;/h2&gt;

&lt;p&gt;Using these techniques we can analyze large log files to search for specific values or events. These techniques can work when querying a single file or combining multiple files together. Also, since these techniques are done on the command-line they can be easily scripts and repeated or executed in an automated fashion.  With a few basic scrips one can develop sophisticated techniques for measuring software metrics. Check back for future articles on how to take these metrics and seamlessly create graphs using the gnuplot command-line utility.&lt;/p&gt;</content><author><name></name></author><summary type="html">Introduction When troubleshooting software we usually don’t have all the required information in one place. Often we only have command-line access to low level application and system log files. Command line tools such as tail, cat, grep etc. can be combined to provide basic insights into application performance. Lets look at some examples of how to use standard UNIX command-line tools to analyze application log files.</summary></entry><entry><title type="html">Quick and Dirty Software Metrics using Awk</title><link href="https://mode19.github.io/humanreadable/awk,/unix/2018/03/01/Quick-and-dirty-software-metrics-using-awk.html" rel="alternate" type="text/html" title="Quick and Dirty Software Metrics using Awk" /><published>2018-03-01T00:00:00-06:00</published><updated>2018-03-01T00:00:00-06:00</updated><id>https://mode19.github.io/humanreadable/awk,/unix/2018/03/01/Quick-and-dirty-software-metrics-using-awk</id><content type="html" xml:base="https://mode19.github.io/humanreadable/awk,/unix/2018/03/01/Quick-and-dirty-software-metrics-using-awk.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;When troubleshooting software we don’t often have the luxury of a metrics dashboard or a monitoring system. Frequently we are patching together data from different sources and using only command-line access. The UNIX command line has lots of great text processing utilities such as cat, tail, grep, awk etc, however, numerical analysis can be challenging on the command-line.
  In this example we show how to calculate basic metrics such as average/median/minimum and maximum using an awk script.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Basic familiarity with UNIX command line utilities such as cat, tail, grep etc&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-to-make-sense-of-a-list-of-numbers&quot;&gt;How to make Sense of a List of Numbers?&lt;/h2&gt;

&lt;p&gt;With computers we are constantly dealing with vast quantities of data and numbers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/humanreadable/assets/images/green_numbers.png&quot; alt=&quot;Matrix Numbers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The image above looks a bit intimiating, so lets break it down to a simpler example such as this file below: numbers.txt. This could be a list of response times for a software service, or an average number of monthly logins for a certain type of customers, it could be a monetary amount such as a list of prices paid for a service. Given this list of numbers how do we begin to make sense of it and analyze it?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat numbers.txt
22
12.1
11
12
3434
29343
138
392
19342
23991
19923
23
9144
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;One way is to use a UNIX script to calculate some basic metrics such as averages. We can &lt;a href=&quot;https://en.wikipedia.org/wiki/Cat_(Unix)&quot;&gt;cat&lt;/a&gt; the file to standard output and pipe the data into our script as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat numbers.txt | ~/bin/calc.sh 
sum     count   avg     median  min     max
105787  13      8137.47 392     11      29343
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Lets look at how to create our own calc.sh script using the UNIX text processing utility &lt;a href=&quot;https://en.wikipedia.org/wiki/AWK&quot;&gt;Awk&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-is-awk&quot;&gt;What is awk&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/AWK&quot;&gt;Awk&lt;/a&gt; is command-line text processor that can be used to quickly process text input. An awk program works by parsing an input file into records and each record is broken down into fields. By default, records are delimited by new line characters and fields are demarcated by any white-space characters. However, records and fields can be controlled by the awk RS (record-separator) and FS (field-separator) variables. By default the separators are character types, but can also be regular expressions.&lt;/p&gt;

&lt;p&gt;Once the data is parsed into records and fields and awk program consists of condition-command pairs that are applied to each input record. If the condition is true for that record then the command is executed. The program is over when all the records have been processed making it ideal for filtering or counting of events.&lt;/p&gt;

&lt;p&gt;In addition to processing for each record a BEGIN and END section are executed unconditionally before and after processing of the records.&lt;/p&gt;

&lt;p&gt;Lets dive right into our program to see an example.&lt;/p&gt;

&lt;h2 id=&quot;using-awk-to-measure-average-minimum-maximum-and-medium-times&quot;&gt;Using awk to measure Average, Minimum, Maximum and Medium times&lt;/h2&gt;

&lt;p&gt;Copy the following awk script into your ~/bin/calc.sh file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This bash script expects to be fed a line-separated list of numbers and will print out the sum/count/average/medium/min/max encountered.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# based on a script from: https://unix.stackexchange.com/questions/13731/is-there-a-way-to-get-the-min-max-median-and-average-of-a-list-of-numbers-in&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'
  BEGIN {
    c = 0;
    sum = 0;
    OFS=&quot;\t&quot;;
    print &quot;sum&quot;,&quot;count&quot;, &quot;average&quot;, &quot;medium&quot;, &quot;min&quot;, &quot;max&quot;
  }
  $1 ~ /^[0-9]*(\.[0-9]*)?$/ {
    a[c++] = $1;
    sum += $1;
  }
  END {
    ave = sum / c;
    if( (c % 2) == 1 ) {
      median = a[ int(c/2) ];
    } else {
      median = ( a[c/2] + a[c/2-1] ) / 2;
    }
    print sum, c, ave, median, a[0], a[c-1];
}
'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Don’t forget to assign executable permission to the script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod +x ~/bin/calc.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-begin-section&quot;&gt;The BEGIN Section&lt;/h2&gt;
&lt;p&gt;The first block of the program called ‘BEGIN’ is a special section that gets executed before any records are processed. In this case we use the begin block to initialize two variables to 0 and to print out a header line to standard output.&lt;/p&gt;

&lt;h2 id=&quot;the-middle-block&quot;&gt;The Middle Block&lt;/h2&gt;
&lt;p&gt;The middle section of the program is an awk condition-command pair that gets executed for every input record. Lets look at the awk condition in detail: ‘$1 ~ /&lt;REGULAREXPRESSION&gt;/':&lt;/REGULAREXPRESSION&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Awk condition component&lt;/th&gt;
      &lt;th&gt;Meaning&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;$1&lt;/td&gt;
      &lt;td&gt;$1 in awk represents the first field encountered in this record.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;~&lt;/td&gt;
      &lt;td&gt;A ~ character attempts to match a value to a regular expression&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/ regular-expression  /&lt;/td&gt;
      &lt;td&gt;The regular expression is written between two ‘/’ characters&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
The regular expression ^[0-9]&lt;em&gt;(.[0-9]&lt;/em&gt;)?$ will match all numbers and exclude any input lines which are non numbers or contain non-numeric characters (See table below for details).&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Regular Expression Component&lt;/th&gt;
      &lt;th&gt;Meaning&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;^&lt;/td&gt;
      &lt;td&gt;Regular expression to match from the beginning of the field&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[0-9]*&lt;/td&gt;
      &lt;td&gt;Match a series of numbers&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;(.[0-9]*)?&lt;/td&gt;
      &lt;td&gt;Match an optional decimal component to the number&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$&lt;/td&gt;
      &lt;td&gt;Marks the end of the field&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The expression above ensures every number that appears in the input is processed by our awk command ‘a[c++] = $1’. With this command we are saving each input field into an array so that we can calculate the median later. Also by incrementing a ‘sum’ variable we are keeping a running total of all values encountered.&lt;/p&gt;

&lt;h2 id=&quot;the-end-block&quot;&gt;The END Block&lt;/h2&gt;
&lt;p&gt;The END section is executed after all input records have been processed. After processing each record we have an array called ‘a’ which contains every number encountered on the input. Since the first command in the script (before invoking awk) is &lt;a href=&quot;https://en.wikipedia.org/wiki/Sort_(Unix)&quot;&gt;sort&lt;/a&gt; we know the array is ordered, which makes finding the min and max as simple as grabbing the first and last item of the array.&lt;/p&gt;

&lt;h2 id=&quot;conclusion-and-next-steps&quot;&gt;Conclusion and Next Steps&lt;/h2&gt;
&lt;p&gt;Using the above awk script we can quickly analyze numeric values on the command line. Also, we can incorporate basic performance metrics into automated scripts.&lt;/p&gt;</content><author><name></name></author><summary type="html">Introduction When troubleshooting software we don’t often have the luxury of a metrics dashboard or a monitoring system. Frequently we are patching together data from different sources and using only command-line access. The UNIX command line has lots of great text processing utilities such as cat, tail, grep, awk etc, however, numerical analysis can be challenging on the command-line. In this example we show how to calculate basic metrics such as average/median/minimum and maximum using an awk script.</summary></entry><entry><title type="html">VIM Quick Tip: The Global Command</title><link href="https://mode19.github.io/humanreadable/vim/2018/01/09/vim-global-commmand.html" rel="alternate" type="text/html" title="VIM Quick Tip: The Global Command" /><published>2018-01-09T00:00:00-06:00</published><updated>2018-01-09T00:00:00-06:00</updated><id>https://mode19.github.io/humanreadable/vim/2018/01/09/vim-global-commmand</id><content type="html" xml:base="https://mode19.github.io/humanreadable/vim/2018/01/09/vim-global-commmand.html">&lt;p&gt;For vim users, one of the most useful commands to know is the global command. The global command applies an operation to all lines which match (or do not match) a specified pattern.&lt;/p&gt;

&lt;p&gt;To see the formal help page enter the following into vim:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;help :g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The example below looks specifically at the delete (or ‘d’) command, but there are many others that can be used.  To see more commands enter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;help ex-cmd-index
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A common use is to delete lines from a file matching a pattern.  For example:&lt;/p&gt;

&lt;p&gt;If we wanted to remove all the lines containing ‘grapefruit’ from the following file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Michael Jackson
grapefruit1
Joe Cocker
grapefruit2
Bruce Springsteen
grapefruit3
Aretha Franklin
grapefruit4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we would enter the command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:g/grapefruit/d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and be left with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Michael Jackson
Joe Cocker
Bruce Springsteen
Aretha Franklin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, we could remove the lines NOT containing ‘grapefruit’ as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:g!/grapefruit/d 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and be left with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grapefruit1
grapefruit2
grapefruit3
grapefruit4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using more complex patterns can make this command invaluable when cleaning up data files.&lt;/p&gt;</content><author><name></name></author><summary type="html">For vim users, one of the most useful commands to know is the global command. The global command applies an operation to all lines which match (or do not match) a specified pattern.</summary></entry><entry><title type="html">JavaScript Quick Tip: Stringifying an Object with Indentation</title><link href="https://mode19.github.io/humanreadable/javascript/2018/01/09/javascript-JSON-formatting.html" rel="alternate" type="text/html" title="JavaScript Quick Tip: Stringifying an Object with Indentation" /><published>2018-01-09T00:00:00-06:00</published><updated>2018-01-09T00:00:00-06:00</updated><id>https://mode19.github.io/humanreadable/javascript/2018/01/09/javascript-JSON-formatting</id><content type="html" xml:base="https://mode19.github.io/humanreadable/javascript/2018/01/09/javascript-JSON-formatting.html">&lt;p&gt;In JavaScript the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;JSON.stringify&lt;/a&gt; method provides a way of converting a JavaScript object to a string.  This function also has a feature to add linebreaks and indentation as a quick way to make the string more readable which can help during troubleshooting.&lt;/p&gt;

&lt;p&gt;For example, take the following JavaScript object:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
 &lt;span class=&quot;na&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pass it to the stringify function with the following parameters:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The end result is a string that is indented and formatted as a readable string:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;test&quot;: 1,
    &quot;arr&quot;: [
        {
            &quot;a&quot;: 1
        },
        {
            &quot;b&quot;: 2
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">In JavaScript the JSON.stringify method provides a way of converting a JavaScript object to a string. This function also has a feature to add linebreaks and indentation as a quick way to make the string more readable which can help during troubleshooting.</summary></entry></feed>